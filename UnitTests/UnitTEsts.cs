using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using TestsGeneratorLib;
namespace UnitTests
{
    [TestClass]
    public class UnitTests
    {
        [TestMethod]
        public void TestAbstactClass()
        {
            string AbstactClassTest = @"namespace AbsractName
                                            {
                                                abstract class Person
                                                {
                                                    public string Name { get; set; }

                                                    public Person(string name)
                                                    {
                                                        Name = name;
                                                    }

                                                    public void Display()
                                                    {
                                                        Console.WriteLine(Name);
                                                    }
                                                }

                                            }";
            Tests[] tests = TestsGenerator.GenerateTests(AbstactClassTest);
            
            Assert.AreEqual(tests.Length, 0);
        }
        [TestMethod]
        public void TestInterfaceClass()
        {
            string InterfaceClassTest = @" namespace InterfaceName
                                            {
                                                class TestClass { }
                                                interface ITestInt { }
                                                interface IMoreInt { }
                                                class ClassWithInter
                                                {
                                                    public ClassWithInter(int i, ITestInt testInt)
                                                    {
                                                    }
                                                    private void PrivateMeth() { }
                                                    public void VoidMeth(int k, float b, ITestInt test) { }

                                                    public char CharMeth(TestClass test)
                                                    {
                                                        return 'F';
                                                    }
                                                }
                                        }";
            Tests[] tests = TestsGenerator.GenerateTests(InterfaceClassTest);
            string ExpectredText = @"using NUnit.Framework;
using Moq;
using InterfaceName;

namespace InterfaceName.Test
{
    [TestFixture]
    public class ClassWithInterTests
    {
        private ClassWithInter _ClassWithInterUnderTest;
        private Mock<ITestInt> _testIntDependency;
        [SetUp]
        public void SetUp()
        {
            int i = default;
            _testIntDependency = new Mock<ITestInt>();
            _ClassWithInterUnderTest = new ClassWithInter(i, _testIntDependency.Object);
        }

        [Test]
        public void VoidMethTest()
        {
            int k = default;
            float b = default;
            _ClassWithInterUnderTest.VoidMeth(k, b, _testDependency.Object);
            Assert.Fail(" + "\"autogenerated\"" + @");
        }

        [Test]
        public void CharMethTest()
        {
            TestClass test = default;
            char actual = _ClassWithInterUnderTest.CharMeth(test);
            char expected = default;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail(" + "\"autogenerated\"" + @");
        }
    }
}";

            Assert.AreEqual(tests.Length, 1);
            Assert.AreEqual(ExpectredText, tests[0].TestCode);
        }
        [TestMethod]
        public void TestStaticClass()
        {
            string StaticClassTest = @"namespace StaticName
                                        {
                                            static class StaticClass
                                            {
                                                public static void VoidMeth(bool Bool, int k)
                                                {

                                                }

                                                public static bool BoolMeth(string s)
                                                {
                                                    return true;
                                                }
                                            }
                                        }";
            Tests[] tests = TestsGenerator.GenerateTests(StaticClassTest);
            string ExpectredText = @"using NUnit.Framework;
using Moq;
using StaticName;

namespace StaticName.Test
{
    [TestFixture]
    public class StaticClassTests
    {
        [SetUp]
        public void SetUp()
        {
        }

        [Test]
        public void VoidMethTest()
        {
            bool Bool = default;
            int k = default;
            StaticClass.VoidMeth(Bool, k);
            Assert.Fail(" + "\"autogenerated\"" + @");
        }

        [Test]
        public void BoolMethTest()
        {
            string s = default;
            bool actual = StaticClass.BoolMeth(s);
            bool expected = default;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail(" + "\"autogenerated\"" + @");
        }
    }
}";
            Assert.AreEqual(tests.Length, 1);
            Assert.AreEqual(ExpectredText, tests[0].TestCode);
        }
        [TestMethod]
        public void TestSimleClass()
        {
            string SimpleClassTest = @"namespace SimpleNamespace
                                            {
                                                class SimpleClass
                                                {
                                                    private void PrivateMeth() { }
                                                    public void VoidMeth(int k, float b) { }

                                                    public char CharMeth(string s)
                                                    {
                                                        return 'F';
                                                    }
                                                }
                                            }";
            Tests[] tests = TestsGenerator.GenerateTests(SimpleClassTest);

            string ExpectredText = @"using NUnit.Framework;
using Moq;
using SimpleNamespace;

namespace SimpleNamespace.Test
{
    [TestFixture]
    public class SimpleClassTests
    {
        private SimpleClass _SimpleClassUnderTest;
        [SetUp]
        public void SetUp()
        {
            _SimpleClassUnderTest = new SimpleClass();
        }

        [Test]
        public void VoidMethTest()
        {
            int k = default;
            float b = default;
            _SimpleClassUnderTest.VoidMeth(k, b);
            Assert.Fail("+ "\"autogenerated\"" + @");
        }

        [Test]
        public void CharMethTest()
        {
            string s = default;
            char actual = _SimpleClassUnderTest.CharMeth(s);
            char expected = default;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("+"\"autogenerated\""+@");
        }
    }
}";
            Assert.AreEqual(tests.Length, 1);
            Assert.AreEqual(ExpectredText, tests[0].TestCode);
        }
        [TestMethod]
        public void TestManyClass()
        {
            string ManyClassTest = @"namespace InterfaceName
                        {
                            class TestClass { }
                            interface ITestInt { }
                            interface IMoreInt { }
                            class ClassWithInter
                            {
                                public ClassWithInter(int i, ITestInt testInt)
                                {
                                }
                                private void PrivateMeth() { }
                                public void VoidMeth(int k, float b, ITestInt test) { }

                                public char CharMeth(TestClass test)
                                {
                                    return 'F';
                                }
                            }
                            class ClassWithTwoInter
                            {
                                public ClassWithTwoInter(int i, ITestInt testInt, IMoreInt moreInt)
                                {
                                }

                                public char CharMeth(TestClass test)
                                {
                                    return 'F';
                                }
                            }
                        }";
            Tests[] tests = TestsGenerator.GenerateTests(ManyClassTest);

            Assert.AreEqual(tests.Length, 2);
        }
    }
}